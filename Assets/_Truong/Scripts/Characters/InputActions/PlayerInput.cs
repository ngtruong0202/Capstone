//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Truong/Scripts/Characters/InputActions/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""IPlayer"",
            ""id"": ""bda7a145-da32-48db-88eb-83f4182afb18"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8e5ef037-955e-41ce-bc5a-d6b77dabcfd7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WalkToggle"",
                    ""type"": ""Button"",
                    ""id"": ""4cf74d34-1e0d-4cc0-9be7-a43204584271"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c8cec68-f280-4eaf-bac8-7f8cde800c6b"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""8a60907f-f1f8-4cea-9b85-6905a74f1369"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7d4a0abc-0336-471b-9913-e47a576b17d2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""26064896-4a7d-4872-b46b-6259181ed6e9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9d96dbcb-41ad-4cc3-ae11-1f1aa4d76a11"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a5f19a5-5147-4382-bf8f-f85a3e0ffb09"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // IPlayer
        m_IPlayer = asset.FindActionMap("IPlayer", throwIfNotFound: true);
        m_IPlayer_Movement = m_IPlayer.FindAction("Movement", throwIfNotFound: true);
        m_IPlayer_WalkToggle = m_IPlayer.FindAction("WalkToggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // IPlayer
    private readonly InputActionMap m_IPlayer;
    private List<IIPlayerActions> m_IPlayerActionsCallbackInterfaces = new List<IIPlayerActions>();
    private readonly InputAction m_IPlayer_Movement;
    private readonly InputAction m_IPlayer_WalkToggle;
    public struct IPlayerActions
    {
        private @PlayerInput m_Wrapper;
        public IPlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_IPlayer_Movement;
        public InputAction @WalkToggle => m_Wrapper.m_IPlayer_WalkToggle;
        public InputActionMap Get() { return m_Wrapper.m_IPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IIPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_IPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IPlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @WalkToggle.started += instance.OnWalkToggle;
            @WalkToggle.performed += instance.OnWalkToggle;
            @WalkToggle.canceled += instance.OnWalkToggle;
        }

        private void UnregisterCallbacks(IIPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @WalkToggle.started -= instance.OnWalkToggle;
            @WalkToggle.performed -= instance.OnWalkToggle;
            @WalkToggle.canceled -= instance.OnWalkToggle;
        }

        public void RemoveCallbacks(IIPlayerActions instance)
        {
            if (m_Wrapper.m_IPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_IPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IPlayerActions @IPlayer => new IPlayerActions(this);
    public interface IIPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnWalkToggle(InputAction.CallbackContext context);
    }
}
